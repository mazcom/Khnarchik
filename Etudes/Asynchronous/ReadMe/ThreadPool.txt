Что такое пул потоков - это коллекция потоков, которые могут использоваться для выполнения методов в фоновом режиме.
Чтобы избавить пользователя от логики создания потоков, его и придумали. 
Каждому приложению CLR выдаёт свой пул потоков. 
Чтобы какой-то метод выполнить ассинхронно, его нужно поместить в пул потоков. 
Сам пул потоков будет извлекать из очереди методы, и распределять их по потокам.
После выполнения метода, поток не уничтожается, а возвращается в пул в режим ожидания следующих задач.
Напомню, что создание и уничтожение поток очень трудоемкий процесс, поэтому потоки живут в пуле потоков без уничтожения.




ThreadPool.QueueUserWorkItem(new WaitCallback(ExampleMethod))
это и есть способ запуска метода в контексте пула потоков.


Как же контролировать выполнение в пуле потоков или обробатываь иссключения? 
По сути можно создать свою обвертку вокруг выполнения ThreadPool.  

using System;
using System.Threading;

namespace AsyncProgramming
{
    internal class ThreadPoolWorker
    {
        private readonly Action<object> action;

        public ThreadPoolWorker(Action<object> action)
        {
            this.action = action ?? throw new ArgumentNullException(nameof(action));
        }

        public bool Success { get; private set; } = false;
        public bool Completed { get; private set; } = false;
        public Exception Exception { get; private set; } = null;

        public void Start(object state)
        {
            ThreadPool.QueueUserWorkItem(new WaitCallback(ThreadExecution), state);
        }

        public void Wait()
        {
            while (Completed == false)
            {
                Thread.Sleep(150);
            }

            if(Exception != null)
            {
                throw Exception;
            }
        }

        private void ThreadExecution(object state)
        {
            try
            {
                action.Invoke(state);
                Success = true;
            }
            catch (Exception ex)
            {
                Exception = ex;
                Success = false;
            }
            finally
            {
                Completed = true;
            }
        }
    }
}

или

using System;
using System.Threading;

namespace AsyncProgramming
{
    internal class ThreadPoolWorker<TResult>
    {
        private readonly Func<object, TResult> func;
        private TResult result;

        public ThreadPoolWorker(Func<object, TResult> func)
        {
            this.func = func ?? throw new ArgumentNullException(nameof(func));
            result = default;
        }

        public bool Success { get; private set; } = false;
        public bool Completed { get; private set; } = false;
        public Exception Exception { get; private set; } = null;
        public TResult Result
        {
            get
            {
                while (Completed == false)
                {
                    Thread.Sleep(150);
                }

                return Success == true && Exception == null ? result : throw Exception;
            }
        }

        public void Start(object state)
        {
            ThreadPool.QueueUserWorkItem(new WaitCallback(ThreadExecution), state);
        }

        private void ThreadExecution(object state)
        {
            try
            {
                result = func.Invoke(state);
                Success = true;
            }
            catch (Exception ex)
            {
                Exception = ex;
                Success = false;
            }
            finally
            {
                Completed = true;
            }
        }
    }

}








