Поспешай не торопясь.

Но что такое ОО?

Один из возможных ответов на этот вопрос: «комбинация данных и функ-
ций». Однако, несмотря на частое цитирование, этот ответ нельзя признать
точным. Программисты передавали структуры в функции задолго до
1966 года, когда Даль и Нюгор перенесли кадр стека функции в динамиче-
скую память и изобрели ОО.

Другой распространенный ответ: «способ моделирования реального мира».
Это слишком уклончивый ответ.

Некоторые, чтобы объяснить природу ОО, прибегают к трем волшебным
словам: инкапсуляция, наследование и полиморфизм. Они подразумевают,
что ОО является комплексом из этих трех понятий или, по крайней мере,
что объектно-ориентированный язык должен их поддерживать.



Инкапсуляция?
Инкапсуляция упоминается как часть определения ОО потому, что языки
ОО поддерживают простой и эффективный способ инкапсуляции данных
и функций. Как результат, есть возможность очертить круг связанных
данных и функций. За пределами круга эти данные невидимы и доступны
только некоторые функции. Воплощение этого понятия можно наблюдать
в виде приватных членов данных и общедоступных членов-функций класса.


Сильные стороны полиморфизма

Почему операционная система UNIX превратила устройства ввода/выво-
да в плагины? Потому что в конце 1950-х годов мы поняли, что наши про-
граммы не должны зависеть от конкретных устройств. Почему? Потому что
мы успели написать массу программ, зависящих от устройств, прежде чем
смогли понять, что в действительности мы хотели бы, чтобы эти программы,
выполняя свою работу, могли бы использовать разные устройства.


Инверсия зависимости
Зависимость исходного кода от интерфейса. 
А поток управления вызывает реальную имплементацию.
Во время выполнения интерфейсов не существует. 


Факт поддержки языками ОО надежного и удобного механизма полимор-
физма означает, что любую зависимость исходного кода, где бы она ни на-
ходилась, можно инвертировать.


Принцип единственной ответственности

Традиционно принцип единственной ответственности описывался так:
Модуль должен иметь одну и только одну причину для изменения.

Соответственно, окончательная версия принципа единственной ответствен-
ности выглядит так:
Модуль должен отвечать за одного и только за одного актора.


Пожалуй, лучший способ понять суть этого принципа — исследовать при-
знаки его нарушения:






